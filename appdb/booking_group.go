// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BookingGroup is an object representing the database table.
type BookingGroup struct {
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeUID              null.String `boil:"exchange_uid" json:"exchange_uid,omitempty" toml:"exchange_uid" yaml:"exchange_uid,omitempty"`
	ExchangeOrganizerMailbox null.String `boil:"exchange_organizer_mailbox" json:"exchange_organizer_mailbox,omitempty" toml:"exchange_organizer_mailbox" yaml:"exchange_organizer_mailbox,omitempty"`
	ElionaGroupID            null.Int32  `boil:"eliona_group_id" json:"eliona_group_id,omitempty" toml:"eliona_group_id" yaml:"eliona_group_id,omitempty"`

	R *bookingGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingGroupColumns = struct {
	ID                       string
	ExchangeUID              string
	ExchangeOrganizerMailbox string
	ElionaGroupID            string
}{
	ID:                       "id",
	ExchangeUID:              "exchange_uid",
	ExchangeOrganizerMailbox: "exchange_organizer_mailbox",
	ElionaGroupID:            "eliona_group_id",
}

var BookingGroupTableColumns = struct {
	ID                       string
	ExchangeUID              string
	ExchangeOrganizerMailbox string
	ElionaGroupID            string
}{
	ID:                       "booking_group.id",
	ExchangeUID:              "booking_group.exchange_uid",
	ExchangeOrganizerMailbox: "booking_group.exchange_organizer_mailbox",
	ElionaGroupID:            "booking_group.eliona_group_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BookingGroupWhere = struct {
	ID                       whereHelperint64
	ExchangeUID              whereHelpernull_String
	ExchangeOrganizerMailbox whereHelpernull_String
	ElionaGroupID            whereHelpernull_Int32
}{
	ID:                       whereHelperint64{field: "\"ews\".\"booking_group\".\"id\""},
	ExchangeUID:              whereHelpernull_String{field: "\"ews\".\"booking_group\".\"exchange_uid\""},
	ExchangeOrganizerMailbox: whereHelpernull_String{field: "\"ews\".\"booking_group\".\"exchange_organizer_mailbox\""},
	ElionaGroupID:            whereHelpernull_Int32{field: "\"ews\".\"booking_group\".\"eliona_group_id\""},
}

// BookingGroupRels is where relationship names are stored.
var BookingGroupRels = struct {
	BookingOccurrences string
}{
	BookingOccurrences: "BookingOccurrences",
}

// bookingGroupR is where relationships are stored.
type bookingGroupR struct {
	BookingOccurrences BookingOccurrenceSlice `boil:"BookingOccurrences" json:"BookingOccurrences" toml:"BookingOccurrences" yaml:"BookingOccurrences"`
}

// NewStruct creates a new relationship struct
func (*bookingGroupR) NewStruct() *bookingGroupR {
	return &bookingGroupR{}
}

func (r *bookingGroupR) GetBookingOccurrences() BookingOccurrenceSlice {
	if r == nil {
		return nil
	}
	return r.BookingOccurrences
}

// bookingGroupL is where Load methods for each relationship are stored.
type bookingGroupL struct{}

var (
	bookingGroupAllColumns            = []string{"id", "exchange_uid", "exchange_organizer_mailbox", "eliona_group_id"}
	bookingGroupColumnsWithoutDefault = []string{}
	bookingGroupColumnsWithDefault    = []string{"id", "exchange_uid", "exchange_organizer_mailbox", "eliona_group_id"}
	bookingGroupPrimaryKeyColumns     = []string{"id"}
	bookingGroupGeneratedColumns      = []string{}
)

type (
	// BookingGroupSlice is an alias for a slice of pointers to BookingGroup.
	// This should almost always be used instead of []BookingGroup.
	BookingGroupSlice []*BookingGroup
	// BookingGroupHook is the signature for custom BookingGroup hook methods
	BookingGroupHook func(context.Context, boil.ContextExecutor, *BookingGroup) error

	bookingGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingGroupType                 = reflect.TypeOf(&BookingGroup{})
	bookingGroupMapping              = queries.MakeStructMapping(bookingGroupType)
	bookingGroupPrimaryKeyMapping, _ = queries.BindMapping(bookingGroupType, bookingGroupMapping, bookingGroupPrimaryKeyColumns)
	bookingGroupInsertCacheMut       sync.RWMutex
	bookingGroupInsertCache          = make(map[string]insertCache)
	bookingGroupUpdateCacheMut       sync.RWMutex
	bookingGroupUpdateCache          = make(map[string]updateCache)
	bookingGroupUpsertCacheMut       sync.RWMutex
	bookingGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingGroupAfterSelectMu sync.Mutex
var bookingGroupAfterSelectHooks []BookingGroupHook

var bookingGroupBeforeInsertMu sync.Mutex
var bookingGroupBeforeInsertHooks []BookingGroupHook
var bookingGroupAfterInsertMu sync.Mutex
var bookingGroupAfterInsertHooks []BookingGroupHook

var bookingGroupBeforeUpdateMu sync.Mutex
var bookingGroupBeforeUpdateHooks []BookingGroupHook
var bookingGroupAfterUpdateMu sync.Mutex
var bookingGroupAfterUpdateHooks []BookingGroupHook

var bookingGroupBeforeDeleteMu sync.Mutex
var bookingGroupBeforeDeleteHooks []BookingGroupHook
var bookingGroupAfterDeleteMu sync.Mutex
var bookingGroupAfterDeleteHooks []BookingGroupHook

var bookingGroupBeforeUpsertMu sync.Mutex
var bookingGroupBeforeUpsertHooks []BookingGroupHook
var bookingGroupAfterUpsertMu sync.Mutex
var bookingGroupAfterUpsertHooks []BookingGroupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookingGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookingGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookingGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookingGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookingGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookingGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookingGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookingGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookingGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingGroupHook registers your hook function for all future operations.
func AddBookingGroupHook(hookPoint boil.HookPoint, bookingGroupHook BookingGroupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingGroupAfterSelectMu.Lock()
		bookingGroupAfterSelectHooks = append(bookingGroupAfterSelectHooks, bookingGroupHook)
		bookingGroupAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookingGroupBeforeInsertMu.Lock()
		bookingGroupBeforeInsertHooks = append(bookingGroupBeforeInsertHooks, bookingGroupHook)
		bookingGroupBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookingGroupAfterInsertMu.Lock()
		bookingGroupAfterInsertHooks = append(bookingGroupAfterInsertHooks, bookingGroupHook)
		bookingGroupAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookingGroupBeforeUpdateMu.Lock()
		bookingGroupBeforeUpdateHooks = append(bookingGroupBeforeUpdateHooks, bookingGroupHook)
		bookingGroupBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookingGroupAfterUpdateMu.Lock()
		bookingGroupAfterUpdateHooks = append(bookingGroupAfterUpdateHooks, bookingGroupHook)
		bookingGroupAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookingGroupBeforeDeleteMu.Lock()
		bookingGroupBeforeDeleteHooks = append(bookingGroupBeforeDeleteHooks, bookingGroupHook)
		bookingGroupBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookingGroupAfterDeleteMu.Lock()
		bookingGroupAfterDeleteHooks = append(bookingGroupAfterDeleteHooks, bookingGroupHook)
		bookingGroupAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookingGroupBeforeUpsertMu.Lock()
		bookingGroupBeforeUpsertHooks = append(bookingGroupBeforeUpsertHooks, bookingGroupHook)
		bookingGroupBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookingGroupAfterUpsertMu.Lock()
		bookingGroupAfterUpsertHooks = append(bookingGroupAfterUpsertHooks, bookingGroupHook)
		bookingGroupAfterUpsertMu.Unlock()
	}
}

// OneG returns a single bookingGroup record from the query using the global executor.
func (q bookingGroupQuery) OneG(ctx context.Context) (*BookingGroup, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single bookingGroup record from the query.
func (q bookingGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookingGroup, error) {
	o := &BookingGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for booking_group")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BookingGroup records from the query using the global executor.
func (q bookingGroupQuery) AllG(ctx context.Context) (BookingGroupSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BookingGroup records from the query.
func (q bookingGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingGroupSlice, error) {
	var o []*BookingGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to BookingGroup slice")
	}

	if len(bookingGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BookingGroup records in the query using the global executor
func (q bookingGroupQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BookingGroup records in the query.
func (q bookingGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count booking_group rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bookingGroupQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookingGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if booking_group exists")
	}

	return count > 0, nil
}

// BookingOccurrences retrieves all the booking_occurrence's BookingOccurrences with an executor.
func (o *BookingGroup) BookingOccurrences(mods ...qm.QueryMod) bookingOccurrenceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ews\".\"booking_occurrence\".\"booking_group_id\"=?", o.ID),
	)

	return BookingOccurrences(queryMods...)
}

// LoadBookingOccurrences allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookingGroupL) LoadBookingOccurrences(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookingGroup interface{}, mods queries.Applicator) error {
	var slice []*BookingGroup
	var object *BookingGroup

	if singular {
		var ok bool
		object, ok = maybeBookingGroup.(*BookingGroup)
		if !ok {
			object = new(BookingGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookingGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookingGroup))
			}
		}
	} else {
		s, ok := maybeBookingGroup.(*[]*BookingGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookingGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookingGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookingGroupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookingGroupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ews.booking_occurrence`),
		qm.WhereIn(`ews.booking_occurrence.booking_group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load booking_occurrence")
	}

	var resultSlice []*BookingOccurrence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice booking_occurrence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on booking_occurrence")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booking_occurrence")
	}

	if len(bookingOccurrenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BookingOccurrences = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingOccurrenceR{}
			}
			foreign.R.BookingGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BookingGroupID {
				local.R.BookingOccurrences = append(local.R.BookingOccurrences, foreign)
				if foreign.R == nil {
					foreign.R = &bookingOccurrenceR{}
				}
				foreign.R.BookingGroup = local
				break
			}
		}
	}

	return nil
}

// AddBookingOccurrencesG adds the given related objects to the existing relationships
// of the booking_group, optionally inserting them as new records.
// Appends related to o.R.BookingOccurrences.
// Sets related.R.BookingGroup appropriately.
// Uses the global database handle.
func (o *BookingGroup) AddBookingOccurrencesG(ctx context.Context, insert bool, related ...*BookingOccurrence) error {
	return o.AddBookingOccurrences(ctx, boil.GetContextDB(), insert, related...)
}

// AddBookingOccurrences adds the given related objects to the existing relationships
// of the booking_group, optionally inserting them as new records.
// Appends related to o.R.BookingOccurrences.
// Sets related.R.BookingGroup appropriately.
func (o *BookingGroup) AddBookingOccurrences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookingOccurrence) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BookingGroupID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ews\".\"booking_occurrence\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"booking_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookingOccurrencePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BookingGroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bookingGroupR{
			BookingOccurrences: related,
		}
	} else {
		o.R.BookingOccurrences = append(o.R.BookingOccurrences, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingOccurrenceR{
				BookingGroup: o,
			}
		} else {
			rel.R.BookingGroup = o
		}
	}
	return nil
}

// BookingGroups retrieves all the records using an executor.
func BookingGroups(mods ...qm.QueryMod) bookingGroupQuery {
	mods = append(mods, qm.From("\"ews\".\"booking_group\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ews\".\"booking_group\".*"})
	}

	return bookingGroupQuery{q}
}

// FindBookingGroupG retrieves a single record by ID.
func FindBookingGroupG(ctx context.Context, iD int64, selectCols ...string) (*BookingGroup, error) {
	return FindBookingGroup(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBookingGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookingGroup(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BookingGroup, error) {
	bookingGroupObj := &BookingGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ews\".\"booking_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookingGroupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from booking_group")
	}

	if err = bookingGroupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingGroupObj, err
	}

	return bookingGroupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BookingGroup) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookingGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no booking_group provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingGroupInsertCacheMut.RLock()
	cache, cached := bookingGroupInsertCache[key]
	bookingGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingGroupAllColumns,
			bookingGroupColumnsWithDefault,
			bookingGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingGroupType, bookingGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingGroupType, bookingGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ews\".\"booking_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ews\".\"booking_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into booking_group")
	}

	if !cached {
		bookingGroupInsertCacheMut.Lock()
		bookingGroupInsertCache[key] = cache
		bookingGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BookingGroup record using the global executor.
// See Update for more documentation.
func (o *BookingGroup) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BookingGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookingGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingGroupUpdateCacheMut.RLock()
	cache, cached := bookingGroupUpdateCache[key]
	bookingGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingGroupAllColumns,
			bookingGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update booking_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ews\".\"booking_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookingGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingGroupType, bookingGroupMapping, append(wl, bookingGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update booking_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for booking_group")
	}

	if !cached {
		bookingGroupUpdateCacheMut.Lock()
		bookingGroupUpdateCache[key] = cache
		bookingGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookingGroupQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for booking_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for booking_group")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookingGroupSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ews\".\"booking_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookingGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in bookingGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all bookingGroup")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BookingGroup) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookingGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no booking_group provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingGroupUpsertCacheMut.RLock()
	cache, cached := bookingGroupUpsertCache[key]
	bookingGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookingGroupAllColumns,
			bookingGroupColumnsWithDefault,
			bookingGroupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingGroupAllColumns,
			bookingGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert booking_group, could not build update column list")
		}

		ret := strmangle.SetComplement(bookingGroupAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookingGroupPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert booking_group, could not build conflict column list")
			}

			conflict = make([]string, len(bookingGroupPrimaryKeyColumns))
			copy(conflict, bookingGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ews\".\"booking_group\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookingGroupType, bookingGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingGroupType, bookingGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert booking_group")
	}

	if !cached {
		bookingGroupUpsertCacheMut.Lock()
		bookingGroupUpsertCache[key] = cache
		bookingGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BookingGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BookingGroup) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BookingGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookingGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no BookingGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"ews\".\"booking_group\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from booking_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for booking_group")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q bookingGroupQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bookingGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no bookingGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from booking_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for booking_group")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookingGroupSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ews\".\"booking_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from bookingGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for booking_group")
	}

	if len(bookingGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BookingGroup) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no BookingGroup provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookingGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookingGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingGroupSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty BookingGroupSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ews\".\"booking_group\".* FROM \"ews\".\"booking_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in BookingGroupSlice")
	}

	*o = slice

	return nil
}

// BookingGroupExistsG checks if the BookingGroup row exists.
func BookingGroupExistsG(ctx context.Context, iD int64) (bool, error) {
	return BookingGroupExists(ctx, boil.GetContextDB(), iD)
}

// BookingGroupExists checks if the BookingGroup row exists.
func BookingGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ews\".\"booking_group\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if booking_group exists")
	}

	return exists, nil
}

// Exists checks if the BookingGroup row exists.
func (o *BookingGroup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingGroupExists(ctx, exec, o.ID)
}
