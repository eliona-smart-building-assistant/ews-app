// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Booking is an object representing the database table.
type Booking struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeID  null.String `boil:"exchange_id" json:"exchange_id,omitempty" toml:"exchange_id" yaml:"exchange_id,omitempty"`
	ExchangeUID null.String `boil:"exchange_uid" json:"exchange_uid,omitempty" toml:"exchange_uid" yaml:"exchange_uid,omitempty"`
	BookingID   null.Int32  `boil:"booking_id" json:"booking_id,omitempty" toml:"booking_id" yaml:"booking_id,omitempty"`

	R *bookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingColumns = struct {
	ID          string
	ExchangeID  string
	ExchangeUID string
	BookingID   string
}{
	ID:          "id",
	ExchangeID:  "exchange_id",
	ExchangeUID: "exchange_uid",
	BookingID:   "booking_id",
}

var BookingTableColumns = struct {
	ID          string
	ExchangeID  string
	ExchangeUID string
	BookingID   string
}{
	ID:          "booking.id",
	ExchangeID:  "booking.exchange_id",
	ExchangeUID: "booking.exchange_uid",
	BookingID:   "booking.booking_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BookingWhere = struct {
	ID          whereHelperint64
	ExchangeID  whereHelpernull_String
	ExchangeUID whereHelpernull_String
	BookingID   whereHelpernull_Int32
}{
	ID:          whereHelperint64{field: "\"ews\".\"booking\".\"id\""},
	ExchangeID:  whereHelpernull_String{field: "\"ews\".\"booking\".\"exchange_id\""},
	ExchangeUID: whereHelpernull_String{field: "\"ews\".\"booking\".\"exchange_uid\""},
	BookingID:   whereHelpernull_Int32{field: "\"ews\".\"booking\".\"booking_id\""},
}

// BookingRels is where relationship names are stored.
var BookingRels = struct {
}{}

// bookingR is where relationships are stored.
type bookingR struct {
}

// NewStruct creates a new relationship struct
func (*bookingR) NewStruct() *bookingR {
	return &bookingR{}
}

// bookingL is where Load methods for each relationship are stored.
type bookingL struct{}

var (
	bookingAllColumns            = []string{"id", "exchange_id", "exchange_uid", "booking_id"}
	bookingColumnsWithoutDefault = []string{}
	bookingColumnsWithDefault    = []string{"id", "exchange_id", "exchange_uid", "booking_id"}
	bookingPrimaryKeyColumns     = []string{"id"}
	bookingGeneratedColumns      = []string{}
)

type (
	// BookingSlice is an alias for a slice of pointers to Booking.
	// This should almost always be used instead of []Booking.
	BookingSlice []*Booking
	// BookingHook is the signature for custom Booking hook methods
	BookingHook func(context.Context, boil.ContextExecutor, *Booking) error

	bookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingType                 = reflect.TypeOf(&Booking{})
	bookingMapping              = queries.MakeStructMapping(bookingType)
	bookingPrimaryKeyMapping, _ = queries.BindMapping(bookingType, bookingMapping, bookingPrimaryKeyColumns)
	bookingInsertCacheMut       sync.RWMutex
	bookingInsertCache          = make(map[string]insertCache)
	bookingUpdateCacheMut       sync.RWMutex
	bookingUpdateCache          = make(map[string]updateCache)
	bookingUpsertCacheMut       sync.RWMutex
	bookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingAfterSelectMu sync.Mutex
var bookingAfterSelectHooks []BookingHook

var bookingBeforeInsertMu sync.Mutex
var bookingBeforeInsertHooks []BookingHook
var bookingAfterInsertMu sync.Mutex
var bookingAfterInsertHooks []BookingHook

var bookingBeforeUpdateMu sync.Mutex
var bookingBeforeUpdateHooks []BookingHook
var bookingAfterUpdateMu sync.Mutex
var bookingAfterUpdateHooks []BookingHook

var bookingBeforeDeleteMu sync.Mutex
var bookingBeforeDeleteHooks []BookingHook
var bookingAfterDeleteMu sync.Mutex
var bookingAfterDeleteHooks []BookingHook

var bookingBeforeUpsertMu sync.Mutex
var bookingBeforeUpsertHooks []BookingHook
var bookingAfterUpsertMu sync.Mutex
var bookingAfterUpsertHooks []BookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Booking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Booking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Booking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Booking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Booking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Booking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Booking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Booking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Booking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingHook registers your hook function for all future operations.
func AddBookingHook(hookPoint boil.HookPoint, bookingHook BookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingAfterSelectMu.Lock()
		bookingAfterSelectHooks = append(bookingAfterSelectHooks, bookingHook)
		bookingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookingBeforeInsertMu.Lock()
		bookingBeforeInsertHooks = append(bookingBeforeInsertHooks, bookingHook)
		bookingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookingAfterInsertMu.Lock()
		bookingAfterInsertHooks = append(bookingAfterInsertHooks, bookingHook)
		bookingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookingBeforeUpdateMu.Lock()
		bookingBeforeUpdateHooks = append(bookingBeforeUpdateHooks, bookingHook)
		bookingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookingAfterUpdateMu.Lock()
		bookingAfterUpdateHooks = append(bookingAfterUpdateHooks, bookingHook)
		bookingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookingBeforeDeleteMu.Lock()
		bookingBeforeDeleteHooks = append(bookingBeforeDeleteHooks, bookingHook)
		bookingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookingAfterDeleteMu.Lock()
		bookingAfterDeleteHooks = append(bookingAfterDeleteHooks, bookingHook)
		bookingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookingBeforeUpsertMu.Lock()
		bookingBeforeUpsertHooks = append(bookingBeforeUpsertHooks, bookingHook)
		bookingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookingAfterUpsertMu.Lock()
		bookingAfterUpsertHooks = append(bookingAfterUpsertHooks, bookingHook)
		bookingAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booking record from the query using the global executor.
func (q bookingQuery) OneG(ctx context.Context) (*Booking, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booking record from the query.
func (q bookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Booking, error) {
	o := &Booking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for booking")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Booking records from the query using the global executor.
func (q bookingQuery) AllG(ctx context.Context) (BookingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Booking records from the query.
func (q bookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingSlice, error) {
	var o []*Booking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to Booking slice")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Booking records in the query using the global executor
func (q bookingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Booking records in the query.
func (q bookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count booking rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bookingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if booking exists")
	}

	return count > 0, nil
}

// Bookings retrieves all the records using an executor.
func Bookings(mods ...qm.QueryMod) bookingQuery {
	mods = append(mods, qm.From("\"ews\".\"booking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ews\".\"booking\".*"})
	}

	return bookingQuery{q}
}

// FindBookingG retrieves a single record by ID.
func FindBookingG(ctx context.Context, iD int64, selectCols ...string) (*Booking, error) {
	return FindBooking(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Booking, error) {
	bookingObj := &Booking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ews\".\"booking\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from booking")
	}

	if err = bookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingObj, err
	}

	return bookingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Booking) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Booking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no booking provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingInsertCacheMut.RLock()
	cache, cached := bookingInsertCache[key]
	bookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ews\".\"booking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ews\".\"booking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into booking")
	}

	if !cached {
		bookingInsertCacheMut.Lock()
		bookingInsertCache[key] = cache
		bookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Booking record using the global executor.
// See Update for more documentation.
func (o *Booking) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Booking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Booking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingUpdateCacheMut.RLock()
	cache, cached := bookingUpdateCache[key]
	bookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update booking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ews\".\"booking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, append(wl, bookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update booking row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for booking")
	}

	if !cached {
		bookingUpdateCacheMut.Lock()
		bookingUpdateCache[key] = cache
		bookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for booking")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ews\".\"booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all booking")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Booking) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Booking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no booking provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingUpsertCacheMut.RLock()
	cache, cached := bookingUpsertCache[key]
	bookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert booking, could not build update column list")
		}

		ret := strmangle.SetComplement(bookingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookingPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert booking, could not build conflict column list")
			}

			conflict = make([]string, len(bookingPrimaryKeyColumns))
			copy(conflict, bookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ews\".\"booking\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert booking")
	}

	if !cached {
		bookingUpsertCacheMut.Lock()
		bookingUpsertCache[key] = cache
		bookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Booking record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Booking) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Booking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Booking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no Booking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingPrimaryKeyMapping)
	sql := "DELETE FROM \"ews\".\"booking\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for booking")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q bookingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no bookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for booking")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ews\".\"booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for booking")
	}

	if len(bookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Booking) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no Booking provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Booking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty BookingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ews\".\"booking\".* FROM \"ews\".\"booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in BookingSlice")
	}

	*o = slice

	return nil
}

// BookingExistsG checks if the Booking row exists.
func BookingExistsG(ctx context.Context, iD int64) (bool, error) {
	return BookingExists(ctx, boil.GetContextDB(), iD)
}

// BookingExists checks if the Booking row exists.
func BookingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ews\".\"booking\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if booking exists")
	}

	return exists, nil
}

// Exists checks if the Booking row exists.
func (o *Booking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingExists(ctx, exec, o.ID)
}
