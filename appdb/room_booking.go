// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoomBooking is an object representing the database table.
type RoomBooking struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BookingOccurrenceID int64       `boil:"booking_occurrence_id" json:"booking_occurrence_id" toml:"booking_occurrence_id" yaml:"booking_occurrence_id"`
	ExchangeID          null.String `boil:"exchange_id" json:"exchange_id,omitempty" toml:"exchange_id" yaml:"exchange_id,omitempty"`

	R *roomBookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomBookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomBookingColumns = struct {
	ID                  string
	BookingOccurrenceID string
	ExchangeID          string
}{
	ID:                  "id",
	BookingOccurrenceID: "booking_occurrence_id",
	ExchangeID:          "exchange_id",
}

var RoomBookingTableColumns = struct {
	ID                  string
	BookingOccurrenceID string
	ExchangeID          string
}{
	ID:                  "room_booking.id",
	BookingOccurrenceID: "room_booking.booking_occurrence_id",
	ExchangeID:          "room_booking.exchange_id",
}

// Generated where

var RoomBookingWhere = struct {
	ID                  whereHelperint64
	BookingOccurrenceID whereHelperint64
	ExchangeID          whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"ews\".\"room_booking\".\"id\""},
	BookingOccurrenceID: whereHelperint64{field: "\"ews\".\"room_booking\".\"booking_occurrence_id\""},
	ExchangeID:          whereHelpernull_String{field: "\"ews\".\"room_booking\".\"exchange_id\""},
}

// RoomBookingRels is where relationship names are stored.
var RoomBookingRels = struct {
	BookingOccurrence string
}{
	BookingOccurrence: "BookingOccurrence",
}

// roomBookingR is where relationships are stored.
type roomBookingR struct {
	BookingOccurrence *BookingOccurrence `boil:"BookingOccurrence" json:"BookingOccurrence" toml:"BookingOccurrence" yaml:"BookingOccurrence"`
}

// NewStruct creates a new relationship struct
func (*roomBookingR) NewStruct() *roomBookingR {
	return &roomBookingR{}
}

func (r *roomBookingR) GetBookingOccurrence() *BookingOccurrence {
	if r == nil {
		return nil
	}
	return r.BookingOccurrence
}

// roomBookingL is where Load methods for each relationship are stored.
type roomBookingL struct{}

var (
	roomBookingAllColumns            = []string{"id", "booking_occurrence_id", "exchange_id"}
	roomBookingColumnsWithoutDefault = []string{}
	roomBookingColumnsWithDefault    = []string{"id", "booking_occurrence_id", "exchange_id"}
	roomBookingPrimaryKeyColumns     = []string{"id"}
	roomBookingGeneratedColumns      = []string{}
)

type (
	// RoomBookingSlice is an alias for a slice of pointers to RoomBooking.
	// This should almost always be used instead of []RoomBooking.
	RoomBookingSlice []*RoomBooking
	// RoomBookingHook is the signature for custom RoomBooking hook methods
	RoomBookingHook func(context.Context, boil.ContextExecutor, *RoomBooking) error

	roomBookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomBookingType                 = reflect.TypeOf(&RoomBooking{})
	roomBookingMapping              = queries.MakeStructMapping(roomBookingType)
	roomBookingPrimaryKeyMapping, _ = queries.BindMapping(roomBookingType, roomBookingMapping, roomBookingPrimaryKeyColumns)
	roomBookingInsertCacheMut       sync.RWMutex
	roomBookingInsertCache          = make(map[string]insertCache)
	roomBookingUpdateCacheMut       sync.RWMutex
	roomBookingUpdateCache          = make(map[string]updateCache)
	roomBookingUpsertCacheMut       sync.RWMutex
	roomBookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomBookingAfterSelectMu sync.Mutex
var roomBookingAfterSelectHooks []RoomBookingHook

var roomBookingBeforeInsertMu sync.Mutex
var roomBookingBeforeInsertHooks []RoomBookingHook
var roomBookingAfterInsertMu sync.Mutex
var roomBookingAfterInsertHooks []RoomBookingHook

var roomBookingBeforeUpdateMu sync.Mutex
var roomBookingBeforeUpdateHooks []RoomBookingHook
var roomBookingAfterUpdateMu sync.Mutex
var roomBookingAfterUpdateHooks []RoomBookingHook

var roomBookingBeforeDeleteMu sync.Mutex
var roomBookingBeforeDeleteHooks []RoomBookingHook
var roomBookingAfterDeleteMu sync.Mutex
var roomBookingAfterDeleteHooks []RoomBookingHook

var roomBookingBeforeUpsertMu sync.Mutex
var roomBookingBeforeUpsertHooks []RoomBookingHook
var roomBookingAfterUpsertMu sync.Mutex
var roomBookingAfterUpsertHooks []RoomBookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoomBooking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoomBooking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoomBooking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoomBooking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoomBooking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoomBooking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoomBooking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoomBooking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoomBooking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomBookingHook registers your hook function for all future operations.
func AddRoomBookingHook(hookPoint boil.HookPoint, roomBookingHook RoomBookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roomBookingAfterSelectMu.Lock()
		roomBookingAfterSelectHooks = append(roomBookingAfterSelectHooks, roomBookingHook)
		roomBookingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roomBookingBeforeInsertMu.Lock()
		roomBookingBeforeInsertHooks = append(roomBookingBeforeInsertHooks, roomBookingHook)
		roomBookingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roomBookingAfterInsertMu.Lock()
		roomBookingAfterInsertHooks = append(roomBookingAfterInsertHooks, roomBookingHook)
		roomBookingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roomBookingBeforeUpdateMu.Lock()
		roomBookingBeforeUpdateHooks = append(roomBookingBeforeUpdateHooks, roomBookingHook)
		roomBookingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roomBookingAfterUpdateMu.Lock()
		roomBookingAfterUpdateHooks = append(roomBookingAfterUpdateHooks, roomBookingHook)
		roomBookingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roomBookingBeforeDeleteMu.Lock()
		roomBookingBeforeDeleteHooks = append(roomBookingBeforeDeleteHooks, roomBookingHook)
		roomBookingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roomBookingAfterDeleteMu.Lock()
		roomBookingAfterDeleteHooks = append(roomBookingAfterDeleteHooks, roomBookingHook)
		roomBookingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roomBookingBeforeUpsertMu.Lock()
		roomBookingBeforeUpsertHooks = append(roomBookingBeforeUpsertHooks, roomBookingHook)
		roomBookingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roomBookingAfterUpsertMu.Lock()
		roomBookingAfterUpsertHooks = append(roomBookingAfterUpsertHooks, roomBookingHook)
		roomBookingAfterUpsertMu.Unlock()
	}
}

// OneG returns a single roomBooking record from the query using the global executor.
func (q roomBookingQuery) OneG(ctx context.Context) (*RoomBooking, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roomBooking record from the query.
func (q roomBookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoomBooking, error) {
	o := &RoomBooking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for room_booking")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoomBooking records from the query using the global executor.
func (q roomBookingQuery) AllG(ctx context.Context) (RoomBookingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoomBooking records from the query.
func (q roomBookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomBookingSlice, error) {
	var o []*RoomBooking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to RoomBooking slice")
	}

	if len(roomBookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoomBooking records in the query using the global executor
func (q roomBookingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoomBooking records in the query.
func (q roomBookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count room_booking rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roomBookingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roomBookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if room_booking exists")
	}

	return count > 0, nil
}

// BookingOccurrence pointed to by the foreign key.
func (o *RoomBooking) BookingOccurrence(mods ...qm.QueryMod) bookingOccurrenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BookingOccurrenceID),
	}

	queryMods = append(queryMods, mods...)

	return BookingOccurrences(queryMods...)
}

// LoadBookingOccurrence allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomBookingL) LoadBookingOccurrence(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomBooking interface{}, mods queries.Applicator) error {
	var slice []*RoomBooking
	var object *RoomBooking

	if singular {
		var ok bool
		object, ok = maybeRoomBooking.(*RoomBooking)
		if !ok {
			object = new(RoomBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomBooking))
			}
		}
	} else {
		s, ok := maybeRoomBooking.(*[]*RoomBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomBookingR{}
		}
		args[object.BookingOccurrenceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomBookingR{}
			}

			args[obj.BookingOccurrenceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ews.booking_occurrence`),
		qm.WhereIn(`ews.booking_occurrence.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BookingOccurrence")
	}

	var resultSlice []*BookingOccurrence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BookingOccurrence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for booking_occurrence")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booking_occurrence")
	}

	if len(bookingOccurrenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BookingOccurrence = foreign
		if foreign.R == nil {
			foreign.R = &bookingOccurrenceR{}
		}
		foreign.R.RoomBookings = append(foreign.R.RoomBookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookingOccurrenceID == foreign.ID {
				local.R.BookingOccurrence = foreign
				if foreign.R == nil {
					foreign.R = &bookingOccurrenceR{}
				}
				foreign.R.RoomBookings = append(foreign.R.RoomBookings, local)
				break
			}
		}
	}

	return nil
}

// SetBookingOccurrenceG of the roomBooking to the related item.
// Sets o.R.BookingOccurrence to related.
// Adds o to related.R.RoomBookings.
// Uses the global database handle.
func (o *RoomBooking) SetBookingOccurrenceG(ctx context.Context, insert bool, related *BookingOccurrence) error {
	return o.SetBookingOccurrence(ctx, boil.GetContextDB(), insert, related)
}

// SetBookingOccurrence of the roomBooking to the related item.
// Sets o.R.BookingOccurrence to related.
// Adds o to related.R.RoomBookings.
func (o *RoomBooking) SetBookingOccurrence(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BookingOccurrence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ews\".\"room_booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"booking_occurrence_id"}),
		strmangle.WhereClause("\"", "\"", 2, roomBookingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookingOccurrenceID = related.ID
	if o.R == nil {
		o.R = &roomBookingR{
			BookingOccurrence: related,
		}
	} else {
		o.R.BookingOccurrence = related
	}

	if related.R == nil {
		related.R = &bookingOccurrenceR{
			RoomBookings: RoomBookingSlice{o},
		}
	} else {
		related.R.RoomBookings = append(related.R.RoomBookings, o)
	}

	return nil
}

// RoomBookings retrieves all the records using an executor.
func RoomBookings(mods ...qm.QueryMod) roomBookingQuery {
	mods = append(mods, qm.From("\"ews\".\"room_booking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ews\".\"room_booking\".*"})
	}

	return roomBookingQuery{q}
}

// FindRoomBookingG retrieves a single record by ID.
func FindRoomBookingG(ctx context.Context, iD int64, selectCols ...string) (*RoomBooking, error) {
	return FindRoomBooking(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoomBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoomBooking(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RoomBooking, error) {
	roomBookingObj := &RoomBooking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ews\".\"room_booking\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roomBookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from room_booking")
	}

	if err = roomBookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roomBookingObj, err
	}

	return roomBookingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoomBooking) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoomBooking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no room_booking provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomBookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomBookingInsertCacheMut.RLock()
	cache, cached := roomBookingInsertCache[key]
	roomBookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomBookingAllColumns,
			roomBookingColumnsWithDefault,
			roomBookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomBookingType, roomBookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomBookingType, roomBookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ews\".\"room_booking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ews\".\"room_booking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into room_booking")
	}

	if !cached {
		roomBookingInsertCacheMut.Lock()
		roomBookingInsertCache[key] = cache
		roomBookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RoomBooking record using the global executor.
// See Update for more documentation.
func (o *RoomBooking) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoomBooking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoomBooking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomBookingUpdateCacheMut.RLock()
	cache, cached := roomBookingUpdateCache[key]
	roomBookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomBookingAllColumns,
			roomBookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update room_booking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ews\".\"room_booking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roomBookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomBookingType, roomBookingMapping, append(wl, roomBookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update room_booking row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for room_booking")
	}

	if !cached {
		roomBookingUpdateCacheMut.Lock()
		roomBookingUpdateCache[key] = cache
		roomBookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roomBookingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roomBookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for room_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for room_booking")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomBookingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomBookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ews\".\"room_booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roomBookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in roomBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all roomBooking")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoomBooking) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoomBooking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no room_booking provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomBookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomBookingUpsertCacheMut.RLock()
	cache, cached := roomBookingUpsertCache[key]
	roomBookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roomBookingAllColumns,
			roomBookingColumnsWithDefault,
			roomBookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roomBookingAllColumns,
			roomBookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert room_booking, could not build update column list")
		}

		ret := strmangle.SetComplement(roomBookingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(roomBookingPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert room_booking, could not build conflict column list")
			}

			conflict = make([]string, len(roomBookingPrimaryKeyColumns))
			copy(conflict, roomBookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ews\".\"room_booking\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(roomBookingType, roomBookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomBookingType, roomBookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert room_booking")
	}

	if !cached {
		roomBookingUpsertCacheMut.Lock()
		roomBookingUpsertCache[key] = cache
		roomBookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RoomBooking record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoomBooking) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoomBooking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoomBooking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no RoomBooking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomBookingPrimaryKeyMapping)
	sql := "DELETE FROM \"ews\".\"room_booking\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from room_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for room_booking")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roomBookingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roomBookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no roomBookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from room_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for room_booking")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoomBookingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomBookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roomBookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ews\".\"room_booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomBookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from roomBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for room_booking")
	}

	if len(roomBookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoomBooking) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no RoomBooking provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoomBooking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoomBooking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomBookingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty RoomBookingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomBookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomBookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ews\".\"room_booking\".* FROM \"ews\".\"room_booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomBookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in RoomBookingSlice")
	}

	*o = slice

	return nil
}

// RoomBookingExistsG checks if the RoomBooking row exists.
func RoomBookingExistsG(ctx context.Context, iD int64) (bool, error) {
	return RoomBookingExists(ctx, boil.GetContextDB(), iD)
}

// RoomBookingExists checks if the RoomBooking row exists.
func RoomBookingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ews\".\"room_booking\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if room_booking exists")
	}

	return exists, nil
}

// Exists checks if the RoomBooking row exists.
func (o *RoomBooking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoomBookingExists(ctx, exec, o.ID)
}
