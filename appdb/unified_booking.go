// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UnifiedBooking is an object representing the database table.
type UnifiedBooking struct {
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeUID              null.String `boil:"exchange_uid" json:"exchange_uid,omitempty" toml:"exchange_uid" yaml:"exchange_uid,omitempty"`
	ExchangeOrganizerMailbox null.String `boil:"exchange_organizer_mailbox" json:"exchange_organizer_mailbox,omitempty" toml:"exchange_organizer_mailbox" yaml:"exchange_organizer_mailbox,omitempty"`
	BookingID                null.Int32  `boil:"booking_id" json:"booking_id,omitempty" toml:"booking_id" yaml:"booking_id,omitempty"`

	R *unifiedBookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L unifiedBookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnifiedBookingColumns = struct {
	ID                       string
	ExchangeUID              string
	ExchangeOrganizerMailbox string
	BookingID                string
}{
	ID:                       "id",
	ExchangeUID:              "exchange_uid",
	ExchangeOrganizerMailbox: "exchange_organizer_mailbox",
	BookingID:                "booking_id",
}

var UnifiedBookingTableColumns = struct {
	ID                       string
	ExchangeUID              string
	ExchangeOrganizerMailbox string
	BookingID                string
}{
	ID:                       "unified_booking.id",
	ExchangeUID:              "unified_booking.exchange_uid",
	ExchangeOrganizerMailbox: "unified_booking.exchange_organizer_mailbox",
	BookingID:                "unified_booking.booking_id",
}

// Generated where

var UnifiedBookingWhere = struct {
	ID                       whereHelperint64
	ExchangeUID              whereHelpernull_String
	ExchangeOrganizerMailbox whereHelpernull_String
	BookingID                whereHelpernull_Int32
}{
	ID:                       whereHelperint64{field: "\"ews\".\"unified_booking\".\"id\""},
	ExchangeUID:              whereHelpernull_String{field: "\"ews\".\"unified_booking\".\"exchange_uid\""},
	ExchangeOrganizerMailbox: whereHelpernull_String{field: "\"ews\".\"unified_booking\".\"exchange_organizer_mailbox\""},
	BookingID:                whereHelpernull_Int32{field: "\"ews\".\"unified_booking\".\"booking_id\""},
}

// UnifiedBookingRels is where relationship names are stored.
var UnifiedBookingRels = struct {
	RoomBookings string
}{
	RoomBookings: "RoomBookings",
}

// unifiedBookingR is where relationships are stored.
type unifiedBookingR struct {
	RoomBookings RoomBookingSlice `boil:"RoomBookings" json:"RoomBookings" toml:"RoomBookings" yaml:"RoomBookings"`
}

// NewStruct creates a new relationship struct
func (*unifiedBookingR) NewStruct() *unifiedBookingR {
	return &unifiedBookingR{}
}

func (r *unifiedBookingR) GetRoomBookings() RoomBookingSlice {
	if r == nil {
		return nil
	}
	return r.RoomBookings
}

// unifiedBookingL is where Load methods for each relationship are stored.
type unifiedBookingL struct{}

var (
	unifiedBookingAllColumns            = []string{"id", "exchange_uid", "exchange_organizer_mailbox", "booking_id"}
	unifiedBookingColumnsWithoutDefault = []string{}
	unifiedBookingColumnsWithDefault    = []string{"id", "exchange_uid", "exchange_organizer_mailbox", "booking_id"}
	unifiedBookingPrimaryKeyColumns     = []string{"id"}
	unifiedBookingGeneratedColumns      = []string{}
)

type (
	// UnifiedBookingSlice is an alias for a slice of pointers to UnifiedBooking.
	// This should almost always be used instead of []UnifiedBooking.
	UnifiedBookingSlice []*UnifiedBooking
	// UnifiedBookingHook is the signature for custom UnifiedBooking hook methods
	UnifiedBookingHook func(context.Context, boil.ContextExecutor, *UnifiedBooking) error

	unifiedBookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unifiedBookingType                 = reflect.TypeOf(&UnifiedBooking{})
	unifiedBookingMapping              = queries.MakeStructMapping(unifiedBookingType)
	unifiedBookingPrimaryKeyMapping, _ = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, unifiedBookingPrimaryKeyColumns)
	unifiedBookingInsertCacheMut       sync.RWMutex
	unifiedBookingInsertCache          = make(map[string]insertCache)
	unifiedBookingUpdateCacheMut       sync.RWMutex
	unifiedBookingUpdateCache          = make(map[string]updateCache)
	unifiedBookingUpsertCacheMut       sync.RWMutex
	unifiedBookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var unifiedBookingAfterSelectMu sync.Mutex
var unifiedBookingAfterSelectHooks []UnifiedBookingHook

var unifiedBookingBeforeInsertMu sync.Mutex
var unifiedBookingBeforeInsertHooks []UnifiedBookingHook
var unifiedBookingAfterInsertMu sync.Mutex
var unifiedBookingAfterInsertHooks []UnifiedBookingHook

var unifiedBookingBeforeUpdateMu sync.Mutex
var unifiedBookingBeforeUpdateHooks []UnifiedBookingHook
var unifiedBookingAfterUpdateMu sync.Mutex
var unifiedBookingAfterUpdateHooks []UnifiedBookingHook

var unifiedBookingBeforeDeleteMu sync.Mutex
var unifiedBookingBeforeDeleteHooks []UnifiedBookingHook
var unifiedBookingAfterDeleteMu sync.Mutex
var unifiedBookingAfterDeleteHooks []UnifiedBookingHook

var unifiedBookingBeforeUpsertMu sync.Mutex
var unifiedBookingBeforeUpsertHooks []UnifiedBookingHook
var unifiedBookingAfterUpsertMu sync.Mutex
var unifiedBookingAfterUpsertHooks []UnifiedBookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UnifiedBooking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UnifiedBooking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UnifiedBooking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UnifiedBooking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UnifiedBooking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UnifiedBooking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UnifiedBooking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UnifiedBooking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UnifiedBooking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unifiedBookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUnifiedBookingHook registers your hook function for all future operations.
func AddUnifiedBookingHook(hookPoint boil.HookPoint, unifiedBookingHook UnifiedBookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		unifiedBookingAfterSelectMu.Lock()
		unifiedBookingAfterSelectHooks = append(unifiedBookingAfterSelectHooks, unifiedBookingHook)
		unifiedBookingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		unifiedBookingBeforeInsertMu.Lock()
		unifiedBookingBeforeInsertHooks = append(unifiedBookingBeforeInsertHooks, unifiedBookingHook)
		unifiedBookingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		unifiedBookingAfterInsertMu.Lock()
		unifiedBookingAfterInsertHooks = append(unifiedBookingAfterInsertHooks, unifiedBookingHook)
		unifiedBookingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		unifiedBookingBeforeUpdateMu.Lock()
		unifiedBookingBeforeUpdateHooks = append(unifiedBookingBeforeUpdateHooks, unifiedBookingHook)
		unifiedBookingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		unifiedBookingAfterUpdateMu.Lock()
		unifiedBookingAfterUpdateHooks = append(unifiedBookingAfterUpdateHooks, unifiedBookingHook)
		unifiedBookingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		unifiedBookingBeforeDeleteMu.Lock()
		unifiedBookingBeforeDeleteHooks = append(unifiedBookingBeforeDeleteHooks, unifiedBookingHook)
		unifiedBookingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		unifiedBookingAfterDeleteMu.Lock()
		unifiedBookingAfterDeleteHooks = append(unifiedBookingAfterDeleteHooks, unifiedBookingHook)
		unifiedBookingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		unifiedBookingBeforeUpsertMu.Lock()
		unifiedBookingBeforeUpsertHooks = append(unifiedBookingBeforeUpsertHooks, unifiedBookingHook)
		unifiedBookingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		unifiedBookingAfterUpsertMu.Lock()
		unifiedBookingAfterUpsertHooks = append(unifiedBookingAfterUpsertHooks, unifiedBookingHook)
		unifiedBookingAfterUpsertMu.Unlock()
	}
}

// OneG returns a single unifiedBooking record from the query using the global executor.
func (q unifiedBookingQuery) OneG(ctx context.Context) (*UnifiedBooking, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single unifiedBooking record from the query.
func (q unifiedBookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UnifiedBooking, error) {
	o := &UnifiedBooking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for unified_booking")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UnifiedBooking records from the query using the global executor.
func (q unifiedBookingQuery) AllG(ctx context.Context) (UnifiedBookingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UnifiedBooking records from the query.
func (q unifiedBookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (UnifiedBookingSlice, error) {
	var o []*UnifiedBooking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to UnifiedBooking slice")
	}

	if len(unifiedBookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UnifiedBooking records in the query using the global executor
func (q unifiedBookingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UnifiedBooking records in the query.
func (q unifiedBookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count unified_booking rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q unifiedBookingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q unifiedBookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if unified_booking exists")
	}

	return count > 0, nil
}

// RoomBookings retrieves all the room_booking's RoomBookings with an executor.
func (o *UnifiedBooking) RoomBookings(mods ...qm.QueryMod) roomBookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ews\".\"room_booking\".\"unified_booking_id\"=?", o.ID),
	)

	return RoomBookings(queryMods...)
}

// LoadRoomBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unifiedBookingL) LoadRoomBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnifiedBooking interface{}, mods queries.Applicator) error {
	var slice []*UnifiedBooking
	var object *UnifiedBooking

	if singular {
		var ok bool
		object, ok = maybeUnifiedBooking.(*UnifiedBooking)
		if !ok {
			object = new(UnifiedBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUnifiedBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUnifiedBooking))
			}
		}
	} else {
		s, ok := maybeUnifiedBooking.(*[]*UnifiedBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUnifiedBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUnifiedBooking))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &unifiedBookingR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unifiedBookingR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ews.room_booking`),
		qm.WhereIn(`ews.room_booking.unified_booking_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load room_booking")
	}

	var resultSlice []*RoomBooking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice room_booking")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on room_booking")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for room_booking")
	}

	if len(roomBookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoomBookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roomBookingR{}
			}
			foreign.R.UnifiedBooking = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnifiedBookingID {
				local.R.RoomBookings = append(local.R.RoomBookings, foreign)
				if foreign.R == nil {
					foreign.R = &roomBookingR{}
				}
				foreign.R.UnifiedBooking = local
				break
			}
		}
	}

	return nil
}

// AddRoomBookingsG adds the given related objects to the existing relationships
// of the unified_booking, optionally inserting them as new records.
// Appends related to o.R.RoomBookings.
// Sets related.R.UnifiedBooking appropriately.
// Uses the global database handle.
func (o *UnifiedBooking) AddRoomBookingsG(ctx context.Context, insert bool, related ...*RoomBooking) error {
	return o.AddRoomBookings(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoomBookings adds the given related objects to the existing relationships
// of the unified_booking, optionally inserting them as new records.
// Appends related to o.R.RoomBookings.
// Sets related.R.UnifiedBooking appropriately.
func (o *UnifiedBooking) AddRoomBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoomBooking) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnifiedBookingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ews\".\"room_booking\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unified_booking_id"}),
				strmangle.WhereClause("\"", "\"", 2, roomBookingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnifiedBookingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unifiedBookingR{
			RoomBookings: related,
		}
	} else {
		o.R.RoomBookings = append(o.R.RoomBookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roomBookingR{
				UnifiedBooking: o,
			}
		} else {
			rel.R.UnifiedBooking = o
		}
	}
	return nil
}

// UnifiedBookings retrieves all the records using an executor.
func UnifiedBookings(mods ...qm.QueryMod) unifiedBookingQuery {
	mods = append(mods, qm.From("\"ews\".\"unified_booking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ews\".\"unified_booking\".*"})
	}

	return unifiedBookingQuery{q}
}

// FindUnifiedBookingG retrieves a single record by ID.
func FindUnifiedBookingG(ctx context.Context, iD int64, selectCols ...string) (*UnifiedBooking, error) {
	return FindUnifiedBooking(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUnifiedBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnifiedBooking(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UnifiedBooking, error) {
	unifiedBookingObj := &UnifiedBooking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ews\".\"unified_booking\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, unifiedBookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from unified_booking")
	}

	if err = unifiedBookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return unifiedBookingObj, err
	}

	return unifiedBookingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UnifiedBooking) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UnifiedBooking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no unified_booking provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unifiedBookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	unifiedBookingInsertCacheMut.RLock()
	cache, cached := unifiedBookingInsertCache[key]
	unifiedBookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			unifiedBookingAllColumns,
			unifiedBookingColumnsWithDefault,
			unifiedBookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ews\".\"unified_booking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ews\".\"unified_booking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into unified_booking")
	}

	if !cached {
		unifiedBookingInsertCacheMut.Lock()
		unifiedBookingInsertCache[key] = cache
		unifiedBookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UnifiedBooking record using the global executor.
// See Update for more documentation.
func (o *UnifiedBooking) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UnifiedBooking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UnifiedBooking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	unifiedBookingUpdateCacheMut.RLock()
	cache, cached := unifiedBookingUpdateCache[key]
	unifiedBookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			unifiedBookingAllColumns,
			unifiedBookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update unified_booking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ews\".\"unified_booking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, unifiedBookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, append(wl, unifiedBookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update unified_booking row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for unified_booking")
	}

	if !cached {
		unifiedBookingUpdateCacheMut.Lock()
		unifiedBookingUpdateCache[key] = cache
		unifiedBookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q unifiedBookingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q unifiedBookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for unified_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for unified_booking")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UnifiedBookingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnifiedBookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unifiedBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ews\".\"unified_booking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, unifiedBookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in unifiedBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all unifiedBooking")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UnifiedBooking) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UnifiedBooking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no unified_booking provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unifiedBookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unifiedBookingUpsertCacheMut.RLock()
	cache, cached := unifiedBookingUpsertCache[key]
	unifiedBookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			unifiedBookingAllColumns,
			unifiedBookingColumnsWithDefault,
			unifiedBookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			unifiedBookingAllColumns,
			unifiedBookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert unified_booking, could not build update column list")
		}

		ret := strmangle.SetComplement(unifiedBookingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(unifiedBookingPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert unified_booking, could not build conflict column list")
			}

			conflict = make([]string, len(unifiedBookingPrimaryKeyColumns))
			copy(conflict, unifiedBookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ews\".\"unified_booking\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unifiedBookingType, unifiedBookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert unified_booking")
	}

	if !cached {
		unifiedBookingUpsertCacheMut.Lock()
		unifiedBookingUpsertCache[key] = cache
		unifiedBookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UnifiedBooking record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UnifiedBooking) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UnifiedBooking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UnifiedBooking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no UnifiedBooking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unifiedBookingPrimaryKeyMapping)
	sql := "DELETE FROM \"ews\".\"unified_booking\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from unified_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for unified_booking")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q unifiedBookingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q unifiedBookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no unifiedBookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from unified_booking")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for unified_booking")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UnifiedBookingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnifiedBookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(unifiedBookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unifiedBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ews\".\"unified_booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, unifiedBookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from unifiedBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for unified_booking")
	}

	if len(unifiedBookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UnifiedBooking) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no UnifiedBooking provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UnifiedBooking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUnifiedBooking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnifiedBookingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty UnifiedBookingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnifiedBookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UnifiedBookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unifiedBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ews\".\"unified_booking\".* FROM \"ews\".\"unified_booking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, unifiedBookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in UnifiedBookingSlice")
	}

	*o = slice

	return nil
}

// UnifiedBookingExistsG checks if the UnifiedBooking row exists.
func UnifiedBookingExistsG(ctx context.Context, iD int64) (bool, error) {
	return UnifiedBookingExists(ctx, boil.GetContextDB(), iD)
}

// UnifiedBookingExists checks if the UnifiedBooking row exists.
func UnifiedBookingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ews\".\"unified_booking\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if unified_booking exists")
	}

	return exists, nil
}

// Exists checks if the UnifiedBooking row exists.
func (o *UnifiedBooking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UnifiedBookingExists(ctx, exec, o.ID)
}
